@page "/cities/add"
@using Telephone.Models
@using Blazor.Service
@inject CityService controller
@inject IModalService Modal

<h1>Title Employee</h1>
<hr />
@if (city != null) // Insert form
    {

    <EditForm Context="formContext" Model="city" OnValidSubmit="Insert">
        <p>
            <label class="control-label col-md-12">ID</label>

            <input class="form-control" @bind="idcity" />

        </p>
        <p>
            <label class="control-label col-md-12">City</label>

            <input class="form-control" @bind="namecity" />
        </p>
        <p>
            <label class="control-label col-md-12">Am</label>

            <input class="form-control" @bind="rateam" />
        </p>
        <p>
            <label class="control-label col-md-12">City</label>

            <input class="form-control" @bind="ratepm" />
        </p>
        <p>
            <label class="control-label col-md-12">City</label>

            <input class="form-control" @bind="discount" />
        </p>
        <br />
        <button @onclick="Insert" class="btn btn-warning">Insert</button>

    </EditForm>
    }




@code{

    City[] city;
    int idcity;
    string namecity = null;
    string ratepm = null;
    string rateam = null;
    string discount = null;
    protected Boolean isAdd = false;
    protected async Task SaveEmployee()
    {
        this.isAdd = false;
        await controller.GetCitysAsync();
    }


    private enum MODE { None, Add, EditDelete };
    MODE mode = MODE.None;
    City citys;
    protected override async Task OnInitializedAsync()
    {
        await load();

    }
    protected async Task load()
    {
        city = await controller.GetCitysAsync();
    }
    protected async Task Insert()
    {

        City s = new City()
        {
            IdCity = idcity,
            NameCity = namecity,
            RateAm = rateam,
            RatePm = ratepm,
            DiscountPercent = discount
        };

        await controller.InsertCityAsync(s);
        ClearFields();
        await load();
        mode = MODE.None;
    }
    protected void ClearFields()
    {
        namecity = string.Empty;
        rateam = string.Empty;
        ratepm = string.Empty;
        discount = string.Empty;
    }
    protected void Add()
    {
        mode = MODE.Add;
    }
    protected async Task Update()
    {

        City s = new City()
        {
            IdCity = idcity,
            NameCity = namecity,
            RateAm = rateam,
            RatePm = ratepm,
            DiscountPercent = discount
        };

        await controller.UpdateCityAsync(idcity.ToString(), s);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Delete()
    {
        await controller.DeleteCityAsync(idcity);
        ClearFields();
        await load();
        mode = MODE.None;
    }

    protected async Task Show(int id)
    {
        citys = await controller.GetCitysByIdAsync(id);
        idcity = citys.IdCity;
        namecity = citys.NameCity;
        ratepm = citys.RatePm;
        rateam = citys.RateAm;
        discount = citys.DiscountPercent;
        mode = MODE.EditDelete;
    }
}